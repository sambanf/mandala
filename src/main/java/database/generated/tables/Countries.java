/*
 * This file is generated by jOOQ.
*/
package database.generated.tables;


import database.generated.DefaultSchema;
import database.generated.Keys;
import database.generated.tables.records.CountriesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Countries extends TableImpl<CountriesRecord> {

    private static final long serialVersionUID = 1818628349;

    /**
     * The reference instance of <code>countries</code>
     */
    public static final Countries COUNTRIES = new Countries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountriesRecord> getRecordType() {
        return CountriesRecord.class;
    }

    /**
     * The column <code>countries.id</code>.
     */
    public final TableField<CountriesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>countries.sortname</code>.
     */
    public final TableField<CountriesRecord, String> SORTNAME = createField("sortname", org.jooq.impl.SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>countries.name</code>.
     */
    public final TableField<CountriesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(150).nullable(false), this, "");

    /**
     * The column <code>countries.phonecode</code>.
     */
    public final TableField<CountriesRecord, Integer> PHONECODE = createField("phonecode", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>countries</code> table reference
     */
    public Countries() {
        this(DSL.name("countries"), null);
    }

    /**
     * Create an aliased <code>countries</code> table reference
     */
    public Countries(String alias) {
        this(DSL.name(alias), COUNTRIES);
    }

    /**
     * Create an aliased <code>countries</code> table reference
     */
    public Countries(Name alias) {
        this(alias, COUNTRIES);
    }

    private Countries(Name alias, Table<CountriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Countries(Name alias, Table<CountriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CountriesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COUNTRIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CountriesRecord> getPrimaryKey() {
        return Keys.PK_COUNTRIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CountriesRecord>> getKeys() {
        return Arrays.<UniqueKey<CountriesRecord>>asList(Keys.PK_COUNTRIES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Countries as(String alias) {
        return new Countries(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Countries as(Name alias) {
        return new Countries(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Countries rename(String name) {
        return new Countries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Countries rename(Name name) {
        return new Countries(name, null);
    }
}
